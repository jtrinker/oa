{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js"],"names":["buildEndpoint","tickerArray","symbolString","forEach","value","index","length","Dashboard","state","endPoint","stockData","symbols","error","setTicker","event","target","checked","setState","nextSymbols","indexOf","splice","createEndpointUrl","tickerSymbols","endPointUrl","getStockData","url","axios","get","then","result","data","console","log","catch","bubbleTicker","this","React","Component","StockPicker","toggleTicker","props","submitSymbols","stockComponents","map","stock","className","key","uuid","label","onChange","small","onClick","Stock","name","close_yesterday","day_change","day_high","day_low","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAIaA,G,OAAgB,SAACC,GAC1B,IAAIC,EAAe,GAUnB,OATAD,EAAYE,SAAQ,SAACC,EAAOC,GAEpBH,EADAG,IAAUJ,EAAYK,OAAS,EACnB,UAAMJ,GAAN,OAAqBD,EAAYI,IAEjC,UAAMH,GAAN,OAAqBD,EAAYI,GAAjC,QATX,wDAaaH,EAAe,4ECPnCK,E,2MACJC,MAAQ,CACNC,SAAU,GACVC,UAAW,GACXC,QAAS,GACTC,MAAO,M,EAGTC,UAAY,SAACC,GACX,GAAIA,EAAMC,OAAOC,QACf,EAAKC,SAAS,CACZN,QAAQ,GAAD,mBAAM,EAAKH,MAAMG,SAAjB,CAA0BG,EAAMC,OAAOX,cAE3C,CACL,IAAIc,EAAW,YAAO,EAAKV,MAAMG,SAC7BN,EAAQa,EAAYC,QAAQL,EAAMC,OAAOX,QAE9B,IAAXC,IACFa,EAAYE,OAAOf,EAAO,GAC1B,EAAKY,SAAS,CAAEN,QAASO,O,EAK/BG,kBAAoB,WAClB,IAAMC,EAAgB,EAAKd,MAAMG,QAC3BY,EAAcvB,EAAcsB,GAClC,EAAKL,SAAS,CAAER,SAAUc,IAAe,kBAAM,EAAKC,aAAa,EAAKhB,MAAMC,c,EAG9Ee,aAAe,SAACC,GACdC,IAAMC,IAAIF,GACPG,MAAK,SAAAC,GAAM,OAAI,EAAKZ,SAAS,CAC5BP,UAAWmB,EAAOC,KAAKA,OACtB,WAAOC,QAAQC,IAAI,EAAKxB,MAAME,iBAChCuB,OAAM,SAAArB,GAAK,OAAI,EAAKK,SAAS,CAC5BL,c,wEAKJ,OACI,kBAAC,EAAD,CAAasB,aAAcC,KAAKtB,UAAWQ,kBAAmBc,KAAKd,kBAAmBS,KAAMK,KAAK3B,MAAME,gB,GA1CvF0B,IAAMC,WA+CxBC,E,2MACJC,aAAe,SAACzB,GACd,EAAK0B,MAAMN,aAAapB,I,EAG1B2B,cAAgB,WACd,EAAKD,MAAMnB,qB,wEAIX,IAAMqB,EAAkBP,KAAKK,MAAMV,KAAKa,KAAI,SAACC,GAAD,OAC1C,yBAAKC,UAAU,SAASC,IAAKC,OACzB,kBAAC,EAAD,CACEH,MAAOA,QAKf,OACE,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,WAAD,CAAUG,MAAM,MAAM5C,MAAM,MAAMyC,UAAU,eAAeI,SAAUd,KAAKI,gBAE5E,yBAAKM,UAAU,iBACb,kBAAC,WAAD,CAAUG,MAAM,OAAO5C,MAAM,OAAOyC,UAAU,eAAeI,SAAUd,KAAKI,gBAE9E,yBAAKM,UAAU,gBACb,kBAAC,WAAD,CAAUG,MAAM,MAAM5C,MAAM,MAAMyC,UAAU,eAAeI,SAAUd,KAAKI,iBAG9E,yBAAKM,UAAU,OACb,kBAAC,SAAD,CAAQK,OAAK,EAACC,QAAShB,KAAKM,eAA5B,oBAEF,6BACA,yBAAKI,UAAU,OACZH,Q,GApCeN,IAAMC,WA2C1Be,E,iLAEF,OACE,6BACM,4BAAKjB,KAAKK,MAAMI,MAAMS,MACtB,+CAAoB,8BAAOlB,KAAKK,MAAMI,MAAMU,kBAC5C,4CAAiB,8BAAOnB,KAAKK,MAAMI,MAAMW,aACzC,wCAAa,8BAAOpB,KAAKK,MAAMI,MAAMY,WACrC,uCAAY,8BAAOrB,KAAKK,MAAMI,MAAMa,e,GAR5BrB,IAAMC,WAcX9B,ICnGKmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,iB","file":"static/js/main.6cf1966e.chunk.js","sourcesContent":["// API INFO\r\nconst ROOT = 'https://api.worldtradingdata.com/api/v1/stock?symbol=';\r\nconst TOKEN = '=z5IhiYKbAvjvwC05hl1759smWFH5tHMw5HobVE72IRV5d0hlg3863Ygzym5G';\r\n\r\nexport const buildEndpoint = (tickerArray) => {\r\n    let symbolString = '';\r\n    tickerArray.forEach((value, index) => {\r\n        if (index === tickerArray.length - 1) {\r\n            symbolString = `${symbolString}${tickerArray[index]}`;\r\n        } else {\r\n            symbolString = `${symbolString}${tickerArray[index]},`;\r\n        }\r\n    });\r\n    \r\n    let endPoint = ROOT + symbolString + '&api_token' + TOKEN;\r\n    return endPoint;\r\n};\r\n  ","import React from 'react';\nimport axios from 'axios';\nimport uuid from 'react-uuid';\nimport { Button, Card, Row, Col, Checkbox } from 'react-materialize';\nimport './App.css';\nimport { buildEndpoint } from './helpers.js'\n\nclass Dashboard extends React.Component {\n  state = {\n    endPoint: '',\n    stockData: [],\n    symbols: [],\n    error: null\n  }\n\n  setTicker = (event) => {\n    if (event.target.checked) {\n      this.setState({\n        symbols: [...this.state.symbols, event.target.value]\n      });\n    } else {\n      let nextSymbols = [...this.state.symbols]; \n      let index = nextSymbols.indexOf(event.target.value);\n\n      if (index !== -1) {\n        nextSymbols.splice(index, 1);\n        this.setState({ symbols: nextSymbols });\n      }\n    }\n  }\n\n  createEndpointUrl = () => {\n    const tickerSymbols = this.state.symbols;\n    const endPointUrl = buildEndpoint(tickerSymbols);\n    this.setState({ endPoint: endPointUrl }, () => this.getStockData(this.state.endPoint));\n  }\n\n  getStockData = (url) => {\n    axios.get(url)\n      .then(result => this.setState({\n        stockData: result.data.data\n      }, () => {console.log(this.state.stockData)})) // view array output of data fetch\n      .catch(error => this.setState({\n        error\n      }));\n  }\n\n  render() {\n    return (\n        <StockPicker bubbleTicker={this.setTicker} createEndpointUrl={this.createEndpointUrl} data={this.state.stockData} />\n    )\n  }\n}\n\nclass StockPicker extends React.Component {\n  toggleTicker = (event) => {\n    this.props.bubbleTicker(event)\n  }\n  \n  submitSymbols = () => {\n    this.props.createEndpointUrl();\n  }\n\n  render () {\n    const stockComponents = this.props.data.map((stock) => (\n      <div className=\"col s4\" key={uuid()}>\n          <Stock \n            stock={stock}\n          /> \n      </div>\n    ));\n    \n    return (\n      <div className=\"container stock-picker\">\n        <div className=\"row\">\n          <div className=\"col s4\">\n            <Checkbox label=\"spy\" value=\"spy\" className=\"ticker-check\" onChange={this.toggleTicker} />\n          </div>\n          <div className=\"col s4 middle\">\n            <Checkbox label=\"goog\" value=\"goog\" className=\"ticker-check\" onChange={this.toggleTicker} />\n          </div>\n          <div className=\"col s4 right\">\n            <Checkbox label=\"tlt\" value=\"tlt\" className=\"ticker-check\" onChange={this.toggleTicker} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <Button small onClick={this.submitSymbols}>Get Ticker Data</Button>\n        </div>\n        <hr />\n        <div className=\"row\">\n          {stockComponents}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Stock extends React.Component {\n  render () {\n    return (\n      <div>\n            <h2>{this.props.stock.name}</h2>\n            <p>Yesterday Close: <span>{this.props.stock.close_yesterday}</span></p>\n            <p>1 Day Change: <span>{this.props.stock.day_change}</span></p>\n            <p>Day High: <span>{this.props.stock.day_high}</span></p>\n            <p>Day Low: <span>{this.props.stock.day_low}</span></p>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}